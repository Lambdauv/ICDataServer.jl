{
    "docs": [
        {
            "location": "/", 
            "text": "ICDataServer.jl\n\n\nAutomatic logging of measurement data and metadata.\n\n\n\n\nInstallation\n\n\nEstimated burden: twenty minutes.\n\n\n\n\nInstall the most recent version of \nPostgreSQL\n. When setting up, a password for the default user (\npostgres\n) will be requested. Choose something secure.\n\n\n\n\nFollowing the installation, Stack Builder will open. This lets you add components to the PostgreSQL installation. Install from Database Drivers (64-bit when there is an option):\n\n\n\n\nODBC driver (only one of the three that is currently utilized)\n\n\nJDBC driver\n\n\nNpgsql\n\n\n\n\n\n\n\n\nNow we need to make a database. Open the pgAdmin application that was installed with PostgreSQL. In the Browser tab, open Servers, then open PostgreSQL 9.6 (or whatever version was installed). This will prompt a login using the password you provided during PostgreSQL installation. After login, right-click Databases and create a database. I suggest giving it the name \nicdataserver\n and leaving everything else as default. Close pgAdmin.\n\n\n\n\n\n\nYou need to configure a data source name (DSN) so that ICDataServer can connect to the database. Open ODBC Data Source Administrator (64-bit) which seems to be installed by default in Windows 10. Under the User DSN tab, add a new DSN with the PostgreSQL ODBC driver (Unicode if available). You'll want to enter the following details:\n\n\n\n\nData Source: \nicdataserver\n (this is the DSN name)\n\n\nDatabase: \nicdataserver\n (name of the database you created in pgAdmin)\n\n\nServer: \nlocalhost\n\n\nPort: \n5432\n (or whatever you chose during PostgreSQL installation)\n\n\nUsername and password as installed. Ideally a different user would be created.\n\n\n\n\n\n\n\n\nInstall ICDataServer: \nPkg.clone(\"https://github.com/painterqubits/ICDataServer.jl.git\")\n\n\n\n\n\n\n\n\nQuick start\n\n\nYou need to provide some configuration files that contain the default entries for the data server. This includes things like the users, servers and their locations, and instrument details. This is detailed in the Configuration docs.\n\n\nOn the first run of ICDataServer, you'll need to setup tables in the database to keep track of all the information you'll be submitting to it. Press enter/return when prompted for a path to the setup files, or you can provide another path.\n\n\njulia\n using ICDataServer\n\njulia\n IC = ICDataServer; dsn = IC.dsn;\n\njulia\n IC.setuptables(dsn)\nPath to directory with setup files? [defaults to ICDataServer/deps]:\n\nC:\\Users\\Discord\\.julia\\v0.5\\ICDataServer\\deps\n\n\n\n\n\nNow the data server can be started. It should be running before you start using \nInstrumentControl\n.\n\n\njulia\n IC.serve() # or @async IC.serve() to have it run in the background.", 
            "title": "Home"
        }, 
        {
            "location": "/#icdataserverjl", 
            "text": "Automatic logging of measurement data and metadata.", 
            "title": "ICDataServer.jl"
        }, 
        {
            "location": "/#installation", 
            "text": "Estimated burden: twenty minutes.   Install the most recent version of  PostgreSQL . When setting up, a password for the default user ( postgres ) will be requested. Choose something secure.   Following the installation, Stack Builder will open. This lets you add components to the PostgreSQL installation. Install from Database Drivers (64-bit when there is an option):   ODBC driver (only one of the three that is currently utilized)  JDBC driver  Npgsql     Now we need to make a database. Open the pgAdmin application that was installed with PostgreSQL. In the Browser tab, open Servers, then open PostgreSQL 9.6 (or whatever version was installed). This will prompt a login using the password you provided during PostgreSQL installation. After login, right-click Databases and create a database. I suggest giving it the name  icdataserver  and leaving everything else as default. Close pgAdmin.    You need to configure a data source name (DSN) so that ICDataServer can connect to the database. Open ODBC Data Source Administrator (64-bit) which seems to be installed by default in Windows 10. Under the User DSN tab, add a new DSN with the PostgreSQL ODBC driver (Unicode if available). You'll want to enter the following details:   Data Source:  icdataserver  (this is the DSN name)  Database:  icdataserver  (name of the database you created in pgAdmin)  Server:  localhost  Port:  5432  (or whatever you chose during PostgreSQL installation)  Username and password as installed. Ideally a different user would be created.     Install ICDataServer:  Pkg.clone(\"https://github.com/painterqubits/ICDataServer.jl.git\")", 
            "title": "Installation"
        }, 
        {
            "location": "/#quick-start", 
            "text": "You need to provide some configuration files that contain the default entries for the data server. This includes things like the users, servers and their locations, and instrument details. This is detailed in the Configuration docs.  On the first run of ICDataServer, you'll need to setup tables in the database to keep track of all the information you'll be submitting to it. Press enter/return when prompted for a path to the setup files, or you can provide another path.  julia  using ICDataServer\n\njulia  IC = ICDataServer; dsn = IC.dsn;\n\njulia  IC.setuptables(dsn)\nPath to directory with setup files? [defaults to ICDataServer/deps]:\n\nC:\\Users\\Discord\\.julia\\v0.5\\ICDataServer\\deps  Now the data server can be started. It should be running before you start using  InstrumentControl .  julia  IC.serve() # or @async IC.serve() to have it run in the background.", 
            "title": "Quick start"
        }, 
        {
            "location": "/design/", 
            "text": "ICDataServer.jl", 
            "title": "Design"
        }, 
        {
            "location": "/config/", 
            "text": "Several configuration files should be generated and put into the \ndeps\n directory of the ICDataServer package. These are not tracked by git as they may contain sensitive information and in any case are specific to the particular installation. These are used by \nICDataServer.setuptables\n to add default information.\n\n\n#\n\n\nICDataServer.setuptables\n \n \nFunction\n.\n\n\nsetuptables()\n\n\n\n\n\nInitialize a database with the tables needed to run ICDataServer:\n\n\n\n\nusers\n\n\nservers\n\n\ninstrumentkinds\n\n\ninstruments\n\n\njobs\n\n\nnotes\n\n\n\n\nThe creation of the tables can proceed without additional input, but in some cases it may make sense for the tables to be automatically filled with data.\n\n\nIf new instrument kinds are added to \ndeps/instrumentkinds.json\n, they will be added to \ninstrumentkinds\n table. If kinds are encountered in the database that are not in the file, they remain in the database and are not deleted.\n\n\nIf new users are added to \ndeps/users.json\n, they will be \"upserted\" into the \nusers\n table (users are created if necessary; if an existing user name is attempted to be inserted into the table, then that user has their info updated from the json file). Existing users not found in users.json remain in the table.\n\n\nsource\n\n\n\n\ndeps/config.json\n\n\nThis JSON file consists of up to four keys and largely exists to provide connection information between the database and InstrumentControl clients. Typical example:\n\n\n{\n    \njobsock\n:\ntcp://*:50001\n,\n    \ndsn\n:\nicdataserver\n,\n}\n\n\n\n\n\nAdditional fields not shown in the example may include:\n\n\n\n\n\"username\": A username to connect to the database, if not provided when the DSN was configured.\n\n\n\"password\": A password to connect to the database, if not provided when the DSN was configured.\n\n\n\n\n\n\ndeps/instrumentkinds.json\n\n\nThis JSON file declares the various kinds of instruments. Its purpose is to standardize such declarations in the database. Typical example:\n\n\n{\n    \nkind\n: [\n        \nawg\n,\n        \ndcsource\n,\n        \nrfsource\n,\n        \nvna\n\n    ]\n}\n\n\n\n\n\n\n\ndeps/servers.json\n\n\nDeclaration of servers. Typical example:\n\n\n{\n    \nservers\n: [\n        {\n            \nalias\n:\nlocal_data\n,\n            \naddress\n:\n127.0.0.1\n,\n            \nport\n:\n50002\n\n        },\n        {\n            \nalias\n:\nlocal_hw\n,\n            \naddress\n:\n127.0.0.1\n,\n            \nport\n:\n50003\n\n        }\n    ]\n}\n\n\n\n\n\n\n\ndeps/users.json\n\n\nDeclaration of users, including contact information which may be used by the software to send alerts and notifications. Typical example:\n\n\n{\n    \nusers\n: [\n        {\n            \nusername\n:\ndefault\n,\n            \nfirst\n:\nNo\n,\n            \nlast\n:\nName\n\n        }, {\n            \nusername\n:\nanotheruser\n,\n            \nfirst\n:\nReally\n,\n            \nmiddle\n:\nNo\n,\n            \nlast\n:\nName\n,\n            \nemail\n:\nsomeaddress@caltech.edu\n,\n            \nphone\n:\n15555551212\n,\n            \noffice\n:\nWatson 5th floor\n\n        }\n    ]\n}\n\n\n\n\n\nThe only required fields for each dictionary are \nusername\n, \nfirst\n, \nlast\n.", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/#depsconfigjson", 
            "text": "This JSON file consists of up to four keys and largely exists to provide connection information between the database and InstrumentControl clients. Typical example:  {\n     jobsock : tcp://*:50001 ,\n     dsn : icdataserver ,\n}  Additional fields not shown in the example may include:   \"username\": A username to connect to the database, if not provided when the DSN was configured.  \"password\": A password to connect to the database, if not provided when the DSN was configured.", 
            "title": "deps/config.json"
        }, 
        {
            "location": "/config/#depsinstrumentkindsjson", 
            "text": "This JSON file declares the various kinds of instruments. Its purpose is to standardize such declarations in the database. Typical example:  {\n     kind : [\n         awg ,\n         dcsource ,\n         rfsource ,\n         vna \n    ]\n}", 
            "title": "deps/instrumentkinds.json"
        }, 
        {
            "location": "/config/#depsserversjson", 
            "text": "Declaration of servers. Typical example:  {\n     servers : [\n        {\n             alias : local_data ,\n             address : 127.0.0.1 ,\n             port : 50002 \n        },\n        {\n             alias : local_hw ,\n             address : 127.0.0.1 ,\n             port : 50003 \n        }\n    ]\n}", 
            "title": "deps/servers.json"
        }, 
        {
            "location": "/config/#depsusersjson", 
            "text": "Declaration of users, including contact information which may be used by the software to send alerts and notifications. Typical example:  {\n     users : [\n        {\n             username : default ,\n             first : No ,\n             last : Name \n        }, {\n             username : anotheruser ,\n             first : Really ,\n             middle : No ,\n             last : Name ,\n             email : someaddress@caltech.edu ,\n             phone : 15555551212 ,\n             office : Watson 5th floor \n        }\n    ]\n}  The only required fields for each dictionary are  username ,  first ,  last .", 
            "title": "deps/users.json"
        }, 
        {
            "location": "/api/", 
            "text": "Many if not all of the functions detailed in this API are really just convenience functions wrapped around methods in the \nODBC.jl\n package, with some syntax specific to how we have set up our databases.\n\n\nOften a \ndsn\n argument is requested. You can provide \nICDataServer.dsn\n.", 
            "title": "General notes"
        }, 
        {
            "location": "/jobs/", 
            "text": "#\n\n\nICDataServer.newjob\n \n \nFunction\n.\n\n\nnewjob(dsn; cryostat=\n, username=\n, device=\n,\n    nmeas=1, jobstart=\n, jobstop=\n, jobstatus=0, dataserver=\n)\n\n\n\n\n\nCreate a new job in the \njobs\n table. This function will return a \nDataFrame\n containing the columns \njob_id\n and \njobsubmit\n with the inserted job id and job submission time.\n\n\nsource\n\n\n#\n\n\nICDataServer.updatejob\n \n \nFunction\n.\n\n\nupdatejob(dsn, job_id; kwargs...)\n\n\n\n\n\nUpdate an existing job in the \njobs\n table based on its \njob_id\n. Specify the fields to update with keyword arguments specified in \nICDataServer.newjob\n.\n\n\nsource", 
            "title": "Jobs"
        }, 
        {
            "location": "/users/", 
            "text": "#\n\n\nICDataServer.newuser\n \n \nFunction\n.\n\n\nnewuser(dsn, username, name; email=\n, phone=\n, office=\n)\n\n\n\n\n\nThis function creates a new user in the \nusers\n table of the database. E-mail, phone, office are useful for contacting users about their measurements.\n\n\nsource\n\n\n#\n\n\nICDataServer.updateuser\n \n \nFunction\n.\n\n\nupdateuser(dsn, username; kwargs...)\n\n\n\n\n\nUpdate an existing user in the \nusers\n table, identified by \nusername\n. Specify the fields to update with keyword arguments specified in \nICDataServer.newuser\n.\n\n\nsource\n\n\n#\n\n\nICDataServer.deleteuser\n \n \nFunction\n.\n\n\ndeleteuser(dsn, username)\n\n\n\n\n\nDelete a user from the \nusers\n table by providing the username.\n\n\nsource\n\n\n#\n\n\nICDataServer.listusers\n \n \nFunction\n.\n\n\nlistusers(dsn)\n\n\n\n\n\nList all users in the \nusers\n table.\n\n\nsource", 
            "title": "Users"
        }, 
        {
            "location": "/servers/", 
            "text": "#\n\n\nICDataServer.newserver\n \n \nFunction\n.\n\n\nnewserver(dsn, name, addr, port::Integer=-1)\n\n\n\n\n\nCreate a new server in the \nservers\n table.\n\n\nsource\n\n\n#\n\n\nICDataServer.updateserver\n \n \nFunction\n.\n\n\nupdateserver(dsn, name; kwargs...)\n\n\n\n\n\nUpdate a server in the \nservers\n table using keyword arguments (\nname\n, \naddress\n, \nport\n).\n\n\nsource\n\n\n#\n\n\nICDataServer.deleteserver\n \n \nFunction\n.\n\n\ndeleteserver(dsn, name)\n\n\n\n\n\nRemove a server from the \nservers\n table by passing its \nname\n.\n\n\nsource\n\n\n#\n\n\nICDataServer.listservers\n \n \nFunction\n.\n\n\nlistservers(dsn, name)\n\n\n\n\n\nList all servers in the \nservers\n table.\n\n\nsource", 
            "title": "Servers"
        }, 
        {
            "location": "/instruments/", 
            "text": "Instruments\n\n\n#\n\n\nICDataServer.newinstrument\n \n \nFunction\n.\n\n\nnewinstrument(dsn, alias; make=\n, model=\n, serialnum=\n, kind=\n,\n    hw_server=\n, protocol=\n, ins_addr=\n)\n\n\n\n\n\nCreate a new instrument named \nalias\n in the \ninstruments\n table.\n\n\nsource\n\n\n#\n\n\nICDataServer.updateinstrument\n \n \nFunction\n.\n\n\nupdateinstrument(dsn, alias; kwargs...)\n\n\n\n\n\nUpdate any of the fields for an instrument named \nalias\n. Possible keyword arguments listed in documentation for \nICDataServer.newinstrument\n.\n\n\nsource\n\n\n#\n\n\nICDataServer.deleteinstrument\n \n \nFunction\n.\n\n\ndeleteinstrument(dsn, alias)\n\n\n\n\n\nDelete instrument named \nalias\n from the \ninstruments\n table.\n\n\nsource\n\n\n#\n\n\nICDataServer.listinstruments\n \n \nFunction\n.\n\n\nlistinstruments(dsn)\n\n\n\n\n\nList instruments in the \ninstruments\n table.\n\n\nsource\n\n\n\n\nConstraints on the \ninstruments\n table\n\n\nTo enforce consistent conventions in the \ninstruments\n table, there are some supporting tables that list the allowed values for an associated column in the \ninstruments\n table.\n\n\n\n\ninstrumentkinds\n table\n\n\nThis table, consisting of one column \nkind\n, lists the different kinds of instruments that may be used in a measurement. More values can be added manually via a database query or via the \ninstrumentkinds.json\n setup file to accommodate new instrument types.", 
            "title": "Instruments"
        }, 
        {
            "location": "/instruments/#instruments", 
            "text": "#  ICDataServer.newinstrument     Function .  newinstrument(dsn, alias; make= , model= , serialnum= , kind= ,\n    hw_server= , protocol= , ins_addr= )  Create a new instrument named  alias  in the  instruments  table.  source  #  ICDataServer.updateinstrument     Function .  updateinstrument(dsn, alias; kwargs...)  Update any of the fields for an instrument named  alias . Possible keyword arguments listed in documentation for  ICDataServer.newinstrument .  source  #  ICDataServer.deleteinstrument     Function .  deleteinstrument(dsn, alias)  Delete instrument named  alias  from the  instruments  table.  source  #  ICDataServer.listinstruments     Function .  listinstruments(dsn)  List instruments in the  instruments  table.  source", 
            "title": "Instruments"
        }, 
        {
            "location": "/instruments/#constraints-on-the-instruments-table", 
            "text": "To enforce consistent conventions in the  instruments  table, there are some supporting tables that list the allowed values for an associated column in the  instruments  table.", 
            "title": "Constraints on the instruments table"
        }, 
        {
            "location": "/instruments/#instrumentkinds-table", 
            "text": "This table, consisting of one column  kind , lists the different kinds of instruments that may be used in a measurement. More values can be added manually via a database query or via the  instrumentkinds.json  setup file to accommodate new instrument types.", 
            "title": "instrumentkinds table"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "The ICDataServer.jl package is licensed under the MIT \"Expat\" License:\n\n\n\n\nCopyright (c) 2016: Andrew Keller.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}